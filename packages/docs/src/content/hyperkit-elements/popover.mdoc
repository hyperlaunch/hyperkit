---
name: Popover
tagline: A simple popover element for showing contextual information or interactive content in an overlay.
---

The `<hyperkit-popover />` element is designed to show hidden content (such as alerts or menus) when a trigger element is clicked. It allows for easy integration into various user interface designs with full control over styling and behaviour, supporting event-driven visibility changes.

The popover can also be closed by pressing the `Escape` key when it is visible.

{% example hero=true %}{% popover / %}{% /example %}

## Usage

Import the JS:
```js
import "@hyperkit/elements/popover";
```

Tag:
```html
<hyperkit-popover>…</hyperkit-popover>
```

### Children

```html
<hyperkit-popover>
  <h7-popover-trigger><button /></h7-popover-trigger>
  <h7-popover-content />
</hyperkit-popover>
```

#### `<h7-popover-trigger />`
* Acts as the trigger for showing or hiding the popover content.
* Must contain a `<button />` for accessibility and interaction.

#### `<h7-popover-content />`
* Holds the content that will be shown when the popover is visible.
* Can be hidden by default using the `hidden` attribute.
* Should be treated as a `<div />` or any container element.

### Transition Support

`<h7-popover-content />` can optionally take a transition element (`<hyperkit-transition />`) as its immediate child. When that's the case, the popover controls the transition lifecycle, and the content becomes hidden when the transition exit finishes.

Example:

```html
<hyperkit-popover>
  …
  <h7-popover-content>
    <hyperkit-transition
      enter-class="transition-all duration-500 ease-in"
      enter-from-class="opacity-0"
      enter-to-class="opacity-100"
      exit-class="transition-all duration-300 ease-out"
      exit-from-class="opacity-100"
      exit-to-class="opacity-0"
    >
      …
    </hyperkit-transition>
  </h7-popover-content>
</hyperkit-popover>
```

### JavaScript API

The `hyperkit-popover` element provides an easy way to control its visibility and listen for changes in visibility.

#### Controlling Visibility

You can manually control the visibility of the popover using the `show` and `hide` methods:

```js
const popover = document.querySelector("hyperkit-popover");
popover.show(); // Displays the popover content
popover.hide(); // Hides the popover content
```

#### Listening for Visibility Changes

The `hyperkit-popover` emits `open` and `close` events that you can listen for using the `on` method. This is triggered when the visibility of the popover changes.

```js
detail.on("show", () => {
  console.log("Popover is now open");
});

detail.on("hide", () => {
  console.log("Popover is now closed");
});
```

#### Accessing Visibility State

You can access the current visibility state using the `hidden` property:

```js
const popover = document.querySelector("hyperkit-popover");
console.log(popover.hidden); // Returns true if the popover is hidden
```

## Examples

### Styling

All elements can be styled conventionally with classes.

The trigger button also receives a `data-visible` attribute when the popover is visible. This can be used to apply contextual styles, such as highlighting the trigger when the popover is active.

#### Example of a Styled Popover

{% example %}{% popover / %}{% /example %}

```html
<hyperkit-popover class="relative w-64 block">
  <h7-popover-trigger>
    <button class="px-2.5 py-2 text-sm shadow-sm rounded border-none bg-zinc-900 text-zinc-200 data-[visible]:bg-zinc-800 flex items-center justify-center font-medium">
      Open Popover
    </button>
  </h7-popover-trigger>
  <h7-popover-content class="w-80 bg-white rounded-lg shadow-lg overflow-hidden absolute mt-2">
    <div class="p-4">
      <div class="text-lg font-semibold text-zinc-800 mt-0 mb-2">
        Popover Title
      </div>
      <div class="text-sm text-zinc-600">
        This is some example content for the popover. You can put any HTML
        content here.
      </div>
    </div>
  </h7-popover-content>
</hyperkit-popover>
```

### Default Hidden

The popover content is hidden by default, using the `hidden` attribute on the `<h7-popover-content />`. This is the typical configuration, where the content is revealed only after the trigger is clicked.

{% example %}
{% popover contentHidden=true / %}
{% /example %}

```html
<hyperkit-popover>
  …
  <h7-popover-content hidden />
</hyperkit-popover>
```

### Using a Transition

You can enhance your popover by adding a `<hyperkit-transition />` as a child of `<h7-popover-content />`. This allows for smooth transitions when showing or hiding the content, while the popover still controls the visibility lifecycle. The transition will handle animations, and the popover will become fully hidden once the exit transition completes.

{% example %}
{% popover contentHidden=true useTransition=true / %}
{% /example %}

```html
<hyperkit-popover>
  …
  <h7-popover-content>
    <hyperkit-transition
      enter-class="transition-all duration-500 ease-in"
      enter-from-class="opacity-0"
      enter-to-class="opacity-100"
      exit-class="transition-all duration-300 ease-out"
      exit-from-class="opacity-100"
      exit-to-class="opacity-0"
    >
      …
    </hyperkit-transition>
  </h7-popover-content>
</hyperkit-popover>
```

## Why Not HTML5 `<popover />`?

The native `<popover />` offers limited control over styles and behaviour. By using `<hyperkit-popover />`, you gain full flexibility in customisation, allowing for more tailored designs and interactions.
