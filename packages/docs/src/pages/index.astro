---
import { Picture } from "astro:assets";
import robot from "../assets/robot.png";
import Layout from "../astro-components/Layout.astro";
import { getComponentTree } from "../utils/component-tree";

const tree = await getComponentTree();
---

<Layout>
  <div class="w-full flex flex-col gap-6 lg:gap-8 xl:gap-10 2xl:gap-12">
    <div class="flex flex-col w-full items-center justify-end relative">
      <Picture
        src={robot}
        format="webp"
        alt=""
        class="w-full max-w-4xl"
        widths={[375, 750, 1200, 1500]}
      />
      <div class="lg:absolute z-40">
        <div
          class="max-w-5xl mx-auto text-black dark:text-white [text-shadow:_0_1px_30px_rgb(255_255_255/_100%)]
lg:[text-shadow:_0_1px_50px_rgb(255_255_255/_100%)] dark:[text-shadow:_0_1px_30px_rgb(0_0_0_/_100%)] dark:lg:[text-shadow:_0_1px_50px_rgb(0_0_0_/_100%)]"
        >
          <h1
            class="text-3xl sm:text-5xl md:text-6xl lg:text-7xl xl:text-8xl font-black mb-4 lg:mb-6 xl:mb-8"
          >
            Headless Elements, Supercharged UIs
          </h1>
          <p class="md:text-lg lg:text-xl xl:text-2xl">
            A suite of unstyled custom elements designed for building rich,
            interactive UIs rapidly &mdash; without writing JavaScript. From
            sortable lists to calendars, modals, and repeating forms, Hyperkit
            let's you create dynamic, scalable interfaces, with pure HTML &amp;
            CSS.
          </p>
        </div>
      </div>
    </div>
    <div
      class="bg-zinc-950 dark:bg-white border border-zinc-700 dark:border-zinc-400 rounded shadow-md px-4 py-2 mr-auto lg:mx-auto white-space-no-wrap text-zinc-100 dark:text-zinc-950 text-sm lg:text-base font-medium"
    >
      bun add @hyperkitxyz/elements
    </div>
    <div class="flex items-center justify-center w-full">
      <div class="relative flex items-center w-full max-w-screen-lg">
        <div
          class="flex-grow h-px bg-gradient-to-r from-transparent via-zinc-200 to-zinc-200 dark:via-zinc-700 dark:to-zinc-700"
        >
        </div>
        <h2
          class="mx-4 text-xs uppercase font-semibold tracking-wider text-zinc-900 dark:text-zinc-100"
        >
          Components
        </h2>
        <div
          class="flex-grow h-px bg-gradient-to-l from-transparent via-zinc-200 to-zinc-200 dark:via-zinc-700 dark:to-zinc-700"
        >
        </div>
      </div>
    </div>
    <nav class="flex flex-col gap-2 lg:gap-4 xl:gap-6 2xl:gap-4">
      {
        tree.map(({ name, items }, i) => (
          <>
            <hyperkit-detail-summoner summons={`component-grid-${i}`}>
              <button class="block w-full flex items-center justify-between text-left px-4 py-2 lg:px-6 bg-zinc-200 dark:bg-zinc-800 rounded font-bold group">
                {name}
                <span class="group-data-[active]:rotate-180 transition-rotate duration-300">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="size-5"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="m4.5 15.75 7.5-7.5 7.5 7.5"
                    />
                  </svg>
                </span>
              </button>
            </hyperkit-detail-summoner>
            <hyperkit-detail id={`component-grid-${i}`}>
              <hyperkit-transition
                class="grid gap-2 lg:gap-4 xl:gap-6 2xl:gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3"
                enter-class="transition-all duration-500 ease-in"
                enter-from-class="opacity-0 max-h-0"
                enter-to-class="opacity-100 max-h-[1000px]"
                exit-class="transition-all duration-300 ease-out"
                exit-from-class="opacity-100 max-h-[1000px]"
                exit-to-class="opacity-0 max-h-0"
              >
                {items.map((item) => (
                  <a
                    href={`/${item?.slug}`}
                    class="group border border-zinc-200 dark:border-zinc-800 rounded overflow-hidden hover:bg-zinc-50 dark:hover:bg-zinc-900 transition-color duration-300"
                  >
                    <div class="p-4 lg:p-6 xl:p-8">
                      <h3 class="lg:text-lg xl:text-xl font-semibold text-zinc-900 dark:text-zinc-100 group-hover:text-lime-500 dark:group-hover:text-lime-400 mb-2">
                        {item?.data.name}
                      </h3>
                      <p class="text-zinc-600 dark:text-zinc-300 group-hover:text-zinc-900 dark:group-hover:text-zinc-100">
                        {item?.data.tagline}
                      </p>
                    </div>
                  </a>
                ))}
              </hyperkit-transition>
            </hyperkit-detail>
          </>
        ))
      }
    </nav>
  </div>
</Layout>
<script>
  import "@hyperkitxyz/elements/detail.ts";
</script>
